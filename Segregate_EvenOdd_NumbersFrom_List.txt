#include <iostream>
using namespace std;
//This will segregate even and odd numbers from a linked list.
// 10->20->11->4->5->7->13->12
// output will be
// 10->20->4->12->11->5->7->13
struct List{
  int data;
  List* next;
  List(int num)
  {
      data = num;
      next = nullptr;
  }
};
void PrintList(List* head)
{
    List*temp = head;
    while(temp) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
List* SeperateEvenOdd(List* head)
{
    List* curr = head;
    List* eHead = new List(-1);
    List* oHead = new List(-1);
    List* even = eHead;
    List* odd = oHead;
    List* result = nullptr;
    while(curr)
    {
        if(curr->data%2 == 0)
        {
            even->next = curr;
            even = even->next;
            
        } else 
        {
            odd->next = curr;
            odd = odd->next;
        }
        curr = curr->next;
    }
    even->next = nullptr; // set null
    odd->next = nullptr;
    
    result = eHead->next; // set even elements first and then odd
    even->next = oHead->next;
    
    /*
    result = oHead->next; // set odd elements first and then even
    odd->next = eHead->next;
    */

    return result;
}
int main()
{
    List* head = new List(10);
    head->next = new List(20);
    head->next->next = new List(11);
    head->next->next->next = new List(9);
    head->next->next->next->next = new List(5);
    head->next->next->next->next->next = new List(14);
    head->next->next->next->next->next->next = new List(13);
    head->next->next->next->next->next->next->next = new List(12);
    
    PrintList(head);
    PrintList(SeperateEvenOdd(head));

    return 0;
}
